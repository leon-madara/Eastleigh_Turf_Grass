{"version":3,"file":"BrokerLoginModal-594b1f0b.js","sources":["../../src/ui/BrokerLoginModal.js"],"sourcesContent":["/**\r\n * Broker Login Modal Component\r\n * Static HTML architecture for maximum performance and reliability\r\n * Handles authentication for broker users with green glass UI\r\n * Redirects to broker.html on successful login\r\n */\r\n(() => {\r\n    // Prevent duplicate initialization\r\n    if (window.brokerModalInitialized) {\r\n        return;\r\n    }\r\n    window.brokerModalInitialized = true;\r\n\r\n    // DOM element references\r\n    let modal = null;\r\n    let form = null;\r\n    let userInput = null;\r\n    let passInput = null;\r\n    let submitBtn = null;\r\n\r\n    // Configuration constants\r\n    const DEMO_USERNAME = 'BROKER';\r\n    const DEMO_PASSWORD = '123';\r\n    const DASHBOARD_URL = '/broker.html';\r\n    const LOADING_DELAY = 700; // Simulated network delay\r\n\r\n    /**\r\n     * Creates and embeds the modal HTML in the DOM\r\n     */\r\n    function createModal() {\r\n        const modalHTML = `\r\n            <div id=\"brokerLogin\" class=\"bl-modal\" hidden>\r\n                <div class=\"bl-overlay\"></div>\r\n                <div class=\"bl-dialog\">\r\n                    <button class=\"bl-close\" aria-label=\"Close modal\">\r\n                        <i class=\"fas fa-times\"></i>\r\n                    </button>\r\n                    \r\n                    <div class=\"bl-head\">\r\n                        <div class=\"bl-mark\">\r\n                            <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                                <path d=\"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4\" />\r\n                                <polyline points=\"10,17 15,12 10,7\" />\r\n                                <line x1=\"15\" y1=\"12\" x2=\"3\" y2=\"12\" />\r\n                            </svg>\r\n                        </div>\r\n                        <h2 class=\"bl-title\">Broker Login</h2>\r\n                        <p class=\"bl-sub\">Enter your credentials to access the broker dashboard</p>\r\n                    </div>\r\n                    \r\n                    <form id=\"bl-form\" class=\"bl-form\">\r\n                        <div class=\"bl-row\">\r\n                            <label for=\"bl-user\">Username</label>\r\n                            <input type=\"text\" id=\"bl-user\" name=\"username\" placeholder=\"Enter your username\" required>\r\n                        </div>\r\n                        \r\n                        <div class=\"bl-row\">\r\n                            <label for=\"bl-pass\">Password</label>\r\n                            <input type=\"password\" id=\"bl-pass\" name=\"password\" placeholder=\"Enter your password\" required>\r\n                        </div>\r\n                        \r\n                        <button type=\"submit\" class=\"bl-btn bl-btn-primary bl-btn-block\">\r\n                            <span class=\"btn-text\">Login</span>\r\n                            <span class=\"btn-loading\" hidden>\r\n                                <i class=\"fas fa-spinner fa-spin\"></i>\r\n                                Logging in...\r\n                            </span>\r\n                        </button>\r\n                        \r\n                        <p class=\"bl-note\">Demo Credentials</p>\r\n                        <p class=\"bl-help\">Username: <code>BROKER</code> | Password: <code>123</code></p>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        // Insert modal at the end of body\r\n        document.body.insertAdjacentHTML('beforeend', modalHTML);\r\n\r\n        // Get DOM references\r\n        modal = document.getElementById('brokerLogin');\r\n        form = document.getElementById('bl-form');\r\n        userInput = document.getElementById('bl-user');\r\n        passInput = document.getElementById('bl-pass');\r\n        submitBtn = document.querySelector('.bl-btn');\r\n    }\r\n\r\n    /**\r\n     * Opens the broker login modal\r\n     * Sets focus to username field and prevents body scrolling\r\n     */\r\n    function open() {\r\n        if (!modal) {\r\n            console.warn('Modal not initialized');\r\n            return;\r\n        }\r\n\r\n        // Remove hidden attribute to show modal\r\n        modal.removeAttribute('hidden');\r\n        document.body.style.overflow = 'hidden';\r\n\r\n        // Small delay to ensure modal is fully rendered before focusing\r\n        setTimeout(() => {\r\n            if (userInput) userInput.focus();\r\n        }, 40);\r\n    }\r\n\r\n    /**\r\n     * Closes the broker login modal\r\n     * Resets form, clears errors, and restores body scrolling\r\n     */\r\n    function close() {\r\n        if (!modal) {\r\n            console.warn('Modal not initialized');\r\n            return;\r\n        }\r\n\r\n        // Add hidden attribute to hide modal\r\n        modal.setAttribute('hidden', '');\r\n        if (form) form.reset();\r\n        clearErrors();\r\n        setLoadingState(false);\r\n        document.body.style.overflow = '';\r\n    }\r\n\r\n    /**\r\n     * Removes all error styling and messages from the form\r\n     */\r\n    function clearErrors() {\r\n        if (!form) return;\r\n\r\n        // Remove error classes from inputs\r\n        const errorInputs = form.querySelectorAll('.bl-error');\r\n        errorInputs.forEach(element => {\r\n            element.classList.remove('bl-error');\r\n        });\r\n\r\n        // Remove error text elements\r\n        const errorElements = form.querySelectorAll('.bl-errtext');\r\n        errorElements.forEach(errorElement => {\r\n            errorElement.remove();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Displays an error message for a specific input field\r\n     * @param {HTMLInputElement} input - The input element that has the error\r\n     * @param {string} message - The error message to display\r\n     */\r\n    function showError(input, message) {\r\n        // Add error styling to the input\r\n        input.classList.add('bl-error');\r\n\r\n        // Create error message element\r\n        const errorDiv = document.createElement('div');\r\n        errorDiv.className = 'bl-errtext';\r\n        errorDiv.innerHTML = `<i class=\"fa-solid fa-circle-exclamation\"></i> ${message}`;\r\n\r\n        // Insert error message after the input\r\n        input.parentNode.insertBefore(errorDiv, input.nextSibling);\r\n    }\r\n\r\n    /**\r\n     * Sets the loading state of the submit button\r\n     * @param {boolean} isLoading - Whether the button should show loading state\r\n     */\r\n    function setLoadingState(isLoading) {\r\n        if (!submitBtn) return;\r\n\r\n        const btnText = submitBtn.querySelector('.btn-text');\r\n        const btnLoading = submitBtn.querySelector('.btn-loading');\r\n\r\n        if (isLoading) {\r\n            submitBtn.classList.add('loading');\r\n            submitBtn.disabled = true;\r\n            if (btnText) btnText.style.display = 'none';\r\n            if (btnLoading) btnLoading.hidden = false;\r\n        } else {\r\n            submitBtn.classList.remove('loading');\r\n            submitBtn.disabled = false;\r\n            if (btnText) btnText.style.display = 'inline';\r\n            if (btnLoading) btnLoading.hidden = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Redirects to the broker dashboard\r\n     */\r\n    function redirectToDashboard() {\r\n        console.log('Redirecting to broker dashboard...');\r\n\r\n        // Set authentication state\r\n        const authState = {\r\n            loggedIn: true,\r\n            user: {\r\n                username: DEMO_USERNAME,\r\n                email: 'broker@eastleighturf.com',\r\n                phone: '+254700000000',\r\n                role: 'broker'\r\n            },\r\n            loginTime: new Date().toISOString()\r\n        };\r\n\r\n        localStorage.setItem('authState', JSON.stringify(authState));\r\n\r\n        // Redirect to dashboard\r\n        window.location.href = DASHBOARD_URL;\r\n    }\r\n\r\n    /**\r\n     * Handles form submission and authentication\r\n     * @param {Event} event - The form submission event\r\n     */\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        if (!form || !userInput || !passInput) {\r\n            console.error('Form elements not found');\r\n            return;\r\n        }\r\n\r\n        // Clear previous errors\r\n        clearErrors();\r\n\r\n        // Get form data\r\n        const username = userInput.value.trim();\r\n        const password = passInput.value.trim();\r\n\r\n        // Validate inputs\r\n        if (!username) {\r\n            showError(userInput, 'Username is required');\r\n            userInput.focus();\r\n            return;\r\n        }\r\n\r\n        if (!password) {\r\n            showError(passInput, 'Password is required');\r\n            passInput.focus();\r\n            return;\r\n        }\r\n\r\n        // Set loading state\r\n        setLoadingState(true);\r\n\r\n        // Simulate authentication API call\r\n        // TODO: Replace with actual authentication API\r\n        setTimeout(() => {\r\n            if (username === DEMO_USERNAME && password === DEMO_PASSWORD) {\r\n                // Successful authentication\r\n                redirectToDashboard();\r\n            } else {\r\n                // Authentication failed\r\n                setLoadingState(false);\r\n                if (userInput) {\r\n                    showError(userInput, 'Invalid credentials. Use demo username: BROKER');\r\n                }\r\n                if (passInput) {\r\n                    showError(passInput, 'Invalid credentials. Use demo password: 123');\r\n                }\r\n                if (userInput) userInput.focus();\r\n            }\r\n        }, LOADING_DELAY);\r\n    }\r\n\r\n    /**\r\n     * Handles keyboard events for modal interaction\r\n     * @param {KeyboardEvent} event - The keyboard event\r\n     */\r\n    function handleKeydown(event) {\r\n        // Close modal on Escape key\r\n        if (event.key === 'Escape' && modal && !modal.hidden) {\r\n            close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes event listeners and DOM references\r\n     */\r\n    function setupEventListeners() {\r\n        if (!modal || !form || !userInput || !passInput || !submitBtn) {\r\n            console.error('Required modal elements not found');\r\n            return;\r\n        }\r\n\r\n        // Setup open button event listener\r\n        const openButton = document.getElementById('dealerLoginBtn');\r\n        if (openButton) {\r\n            openButton.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n                open();\r\n            });\r\n        }\r\n\r\n        // Setup close button event listeners\r\n        const closeButtons = modal.querySelectorAll('.bl-close, .bl-overlay');\r\n        closeButtons.forEach(element => {\r\n            element.addEventListener('click', close);\r\n        });\r\n\r\n        // Setup form submission\r\n        form.addEventListener('submit', handleSubmit);\r\n\r\n        // Setup keyboard event listener\r\n        document.addEventListener('keydown', handleKeydown);\r\n    }\r\n\r\n    /**\r\n     * Initializes the broker login modal\r\n     */\r\n    function initialize() {\r\n        try {\r\n            // Create and embed modal HTML\r\n            createModal();\r\n\r\n            // Setup event listeners\r\n            setupEventListeners();\r\n\r\n            console.log('Broker login modal initialized successfully');\r\n        } catch (error) {\r\n            console.error('Failed to initialize broker login modal:', error);\r\n        }\r\n    }\r\n\r\n    // Initialize the component when DOM is ready\r\n    if (document.readyState === 'loading') {\r\n        document.addEventListener('DOMContentLoaded', initialize);\r\n    } else {\r\n        initialize();\r\n    }\r\n\r\n    // Expose public API for external control\r\n    window.BrokerLogin = {\r\n        open,\r\n        close\r\n    };\r\n})();"],"names":["modal","form","userInput","passInput","submitBtn","DEMO_USERNAME","DEMO_PASSWORD","DASHBOARD_URL","LOADING_DELAY","createModal","modalHTML","open","close","clearErrors","setLoadingState","element","errorElement","showError","input","message","errorDiv","isLoading","btnText","btnLoading","redirectToDashboard","authState","handleSubmit","event","username","password","handleKeydown","setupEventListeners","openButton","e","initialize","error"],"mappings":"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"}