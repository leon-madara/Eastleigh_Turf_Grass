{"version":3,"file":"inquiry.71288545.js","sources":["../src/js/broker/modules/inquiry.js"],"sourcesContent":["// Inquiry Module - Enhanced functionality for price inquiries\r\n(() => {\r\n    let products = [];\r\n    let inquiryItems = [];\r\n    let nextInquiryId = 1;\r\n\r\n    // Initialize the inquiry module\r\n    function init() {\r\n        loadProducts();\r\n        updateUI();\r\n    }\r\n\r\n    // Load products from the main site's JSON\r\n    async function loadProducts() {\r\n        try {\r\n            const response = await fetch('/src/data/products.json');\r\n            products = await response.json();\r\n        } catch (error) {\r\n            console.error('Failed to load products:', error);\r\n            showToast('Failed to load products', 'error');\r\n        }\r\n    }\r\n\r\n    // Add a new inquiry\r\n    function addInquiry() {\r\n        const inquiry = {\r\n            id: nextInquiryId++,\r\n            productId: '',\r\n            product: null,\r\n            originalPrice: 0,\r\n            bargainPrice: 0,\r\n            difference: 0\r\n        };\r\n\r\n        inquiryItems.push(inquiry);\r\n        updateUI();\r\n        showToast('Inquiry added', 'success');\r\n\r\n        // Update cart count\r\n        if (window.BrokerDashboard && window.BrokerDashboard.updateCartCount) {\r\n            window.BrokerDashboard.updateCartCount();\r\n        }\r\n    }\r\n\r\n    // Remove an inquiry\r\n    function removeInquiry(inquiryId) {\r\n        inquiryItems = inquiryItems.filter(inquiry => inquiry.id !== inquiryId);\r\n        updateUI();\r\n        showToast('Inquiry removed', 'success');\r\n\r\n        // Update cart count\r\n        if (window.BrokerDashboard && window.BrokerDashboard.updateCartCount) {\r\n            window.BrokerDashboard.updateCartCount();\r\n        }\r\n    }\r\n\r\n    // Update inquiry details\r\n    function updateInquiry(inquiryId, field, value) {\r\n        const inquiry = inquiryItems.find(inquiry => inquiry.id === inquiryId);\r\n        if (!inquiry) return;\r\n\r\n        if (field === 'productId') {\r\n            const product = products.find(p => p.id === value);\r\n            inquiry.productId = value;\r\n            inquiry.product = product;\r\n            inquiry.originalPrice = product ? product.price : 0;\r\n            inquiry.difference = inquiry.bargainPrice - inquiry.originalPrice;\r\n        } else if (field === 'bargainPrice') {\r\n            inquiry.bargainPrice = window.numberFormatter ? window.numberFormatter.parseFormattedNumber(value) : parseFloat(value) || 0;\r\n            inquiry.difference = inquiry.bargainPrice - inquiry.originalPrice;\r\n        }\r\n\r\n        updateUI();\r\n    }\r\n\r\n    // Get price difference class\r\n    function getPriceDifferenceClass(difference) {\r\n        if (difference < 0) return 'negative';\r\n        if (difference > 0) return 'positive';\r\n        return 'neutral';\r\n    }\r\n\r\n    // Format price difference\r\n    function formatPriceDifference(difference) {\r\n        const absDiff = Math.abs(difference);\r\n        const sign = difference < 0 ? '-' : difference > 0 ? '+' : '';\r\n        return `${sign}KES ${absDiff.toLocaleString('en-US', {\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2\r\n        })}`;\r\n    }\r\n\r\n    // Update the UI\r\n    function updateUI() {\r\n        const tableBody = document.getElementById('inquiryTableBody');\r\n        const emptyState = document.getElementById('emptyInquiryState');\r\n        const submitBtn = document.getElementById('submitInquiriesBtn');\r\n\r\n        if (!tableBody || !emptyState || !submitBtn) return;\r\n\r\n        // Show/hide empty state\r\n        if (inquiryItems.length === 0) {\r\n            tableBody.innerHTML = '';\r\n            emptyState.style.display = 'block';\r\n            submitBtn.disabled = true;\r\n        } else {\r\n            emptyState.style.display = 'none';\r\n            submitBtn.disabled = false;\r\n\r\n            // Render table rows\r\n            tableBody.innerHTML = inquiryItems.map(inquiry => createInquiryRow(inquiry)).join('');\r\n\r\n            // Add event listeners to new elements\r\n            inquiryItems.forEach(inquiry => {\r\n                const productSelect = document.getElementById(`inquiry-product-${inquiry.id}`);\r\n                const bargainInput = document.getElementById(`bargain-${inquiry.id}`);\r\n                const deleteBtn = document.getElementById(`delete-inquiry-${inquiry.id}`);\r\n\r\n                if (productSelect) {\r\n                    productSelect.addEventListener('change', (e) => {\r\n                        updateInquiry(inquiry.id, 'productId', e.target.value);\r\n                    });\r\n                }\r\n\r\n                if (bargainInput) {\r\n                    bargainInput.addEventListener('input', (e) => {\r\n                        updateInquiry(inquiry.id, 'bargainPrice', e.target.value);\r\n                    });\r\n\r\n                    // Add number formatting for bargain price input\r\n                    if (window.numberFormatter) {\r\n                        window.numberFormatter.initInputFormatting(bargainInput, {\r\n                            allowDecimals: true,\r\n                            decimalPlaces: 2,\r\n                            currency: 'KES'\r\n                        });\r\n                    } else {\r\n                        // Fallback: wait for formatter to be available\r\n                        const checkFormatter = setInterval(() => {\r\n                            if (window.numberFormatter) {\r\n                                window.numberFormatter.initInputFormatting(bargainInput, {\r\n                                    allowDecimals: true,\r\n                                    decimalPlaces: 2,\r\n                                    currency: 'KES'\r\n                                });\r\n                                clearInterval(checkFormatter);\r\n                            }\r\n                        }, 100);\r\n                    }\r\n                }\r\n\r\n                if (deleteBtn) {\r\n                    deleteBtn.addEventListener('click', () => {\r\n                        removeInquiry(inquiry.id);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Create inquiry row HTML\r\n    function createInquiryRow(inquiry) {\r\n        const productOptions = products.map(product =>\r\n            `<option value=\"${product.id}\" ${inquiry.productId === product.id ? 'selected' : ''}>\r\n                ${product.name} (${product.thickness})\r\n            </option>`\r\n        ).join('');\r\n\r\n        const differenceClass = getPriceDifferenceClass(inquiry.difference);\r\n        const differenceText = formatPriceDifference(inquiry.difference);\r\n\r\n        return `\r\n            <tr>\r\n                <td>\r\n                  <div class=\"order-field\">\r\n                    <label for=\"inquiry-product-${inquiry.id}\">Product Name</label>\r\n                    <select class=\"table-select\" id=\"inquiry-product-${inquiry.id}\">\r\n                        <option value=\"\">Select a product</option>\r\n                        ${productOptions}\r\n                    </select>\r\n                  </div>\r\n                </td>\r\n                <td>\r\n                  <div class=\"order-field\">\r\n                    <label>Original Price (KES)</label>\r\n                    <input type=\"text\" class=\"table-input\" readonly \r\n                           value=\"${inquiry.originalPrice.toLocaleString('en-US')}\">\r\n                  </div>\r\n                </td>\r\n                <td>\r\n                  <div class=\"order-field\">\r\n                    <label for=\"bargain-${inquiry.id}\">Your Bargain Price (KES)</label>\r\n                    <input type=\"number\" inputmode=\"decimal\" class=\"table-input\" id=\"bargain-${inquiry.id}\" \r\n                           value=\"${inquiry.bargainPrice}\" min=\"0\" step=\"0.01\" placeholder=\"0\">\r\n                  </div>\r\n                </td>\r\n                <td>\r\n                  <div class=\"order-field\">\r\n                    <label>Price Difference</label>\r\n                    <span class=\"price-difference ${differenceClass}\">${differenceText}</span>\r\n                  </div>\r\n                </td>\r\n                <td>\r\n                  <div class=\"order-field\">\r\n                    <label>Action</label>\r\n                    <button class=\"delete-btn\" id=\"delete-inquiry-${inquiry.id}\">\r\n                        <i class=\"fas fa-trash\"></i> Delete\r\n                    </button>\r\n                  </div>\r\n                </td>\r\n            </tr>\r\n        `;\r\n    }\r\n\r\n    // Submit all inquiries\r\n    function submitInquiries() {\r\n        if (inquiryItems.length === 0) {\r\n            showToast('No inquiries to submit', 'error');\r\n            return;\r\n        }\r\n\r\n        // Validate all inquiries have products and bargain prices\r\n        const invalidInquiries = inquiryItems.filter(inquiry =>\r\n            !inquiry.productId || inquiry.bargainPrice <= 0\r\n        );\r\n\r\n        if (invalidInquiries.length > 0) {\r\n            showToast('Please complete all inquiries before submitting', 'error');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Prepare inquiry data for WhatsApp\r\n            const inquiryData = {\r\n                brokerName: 'Broker User', // You can make this dynamic\r\n                brokerEmail: 'broker@eastleighturf.com', // You can make this dynamic\r\n                items: inquiryItems.map(inquiry => ({\r\n                    product: inquiry.product,\r\n                    originalPrice: inquiry.originalPrice,\r\n                    bargainPrice: inquiry.bargainPrice\r\n                })),\r\n                totalOriginal: inquiryItems.reduce((sum, inquiry) => sum + inquiry.originalPrice, 0),\r\n                totalBargain: inquiryItems.reduce((sum, inquiry) => sum + inquiry.bargainPrice, 0)\r\n            };\r\n\r\n            // Send to WhatsApp with fallback\r\n            let success = false;\r\n\r\n            if (window.WhatsAppService && window.WhatsAppService.sendInquiryForm) {\r\n                success = window.WhatsAppService.sendInquiryForm(inquiryData);\r\n            } else {\r\n                // Fallback: open WhatsApp manually\r\n                const message = generateInquiryMessage(inquiryData);\r\n                const whatsappNumber = '254743375997';\r\n                const encodedMessage = encodeURIComponent(message);\r\n                const whatsappUrl = `https://wa.me/${whatsappNumber}?text=${encodedMessage}`;\r\n                window.open(whatsappUrl, '_blank');\r\n                success = true;\r\n            }\r\n\r\n            if (success) {\r\n                showToast('Inquiries submitted successfully! WhatsApp will open with your inquiry details.', 'success');\r\n\r\n                // Clear inquiries\r\n                inquiryItems = [];\r\n                nextInquiryId = 1;\r\n                updateUI();\r\n\r\n                // Update cart count\r\n                if (window.BrokerDashboard && window.BrokerDashboard.updateCartCount) {\r\n                    window.BrokerDashboard.updateCartCount();\r\n                }\r\n            } else {\r\n                showToast('Failed to send inquiries. Please try again.', 'error');\r\n            }\r\n        } catch (error) {\r\n            console.error('Inquiry submission error:', error);\r\n            showToast('An error occurred while submitting the inquiries.', 'error');\r\n        }\r\n    }\r\n\r\n    // Get item count for cart\r\n    function getItemCount() {\r\n        return inquiryItems.length;\r\n    }\r\n\r\n    // Generate inquiry message for WhatsApp\r\n    function generateInquiryMessage(inquiryData) {\r\n        const {\r\n            brokerName,\r\n            brokerEmail,\r\n            items,\r\n            totalOriginal,\r\n            totalBargain\r\n        } = inquiryData;\r\n\r\n        const itemsList = items.map(item => {\r\n            const difference = item.bargainPrice - item.originalPrice;\r\n            const differenceText = difference > 0 ? `+KES ${difference.toLocaleString()}` : `-KES ${Math.abs(difference).toLocaleString()}`;\r\n\r\n            return `• ${item.product.name} (${item.product.thickness})\r\n  Original Price: KES ${item.originalPrice.toLocaleString()}\r\n  Bargain Price: KES ${item.bargainPrice.toLocaleString()}\r\n  Difference: ${differenceText}`;\r\n        }).join('\\n\\n');\r\n\r\n        const totalDifference = totalBargain - totalOriginal;\r\n        const totalDifferenceText = totalDifference > 0 ? `+KES ${totalDifference.toLocaleString()}` : `-KES ${Math.abs(totalDifference).toLocaleString()}`;\r\n\r\n        return `*BROKER PRICE INQUIRY - Eastleigh Turf Grass*\r\n\r\n*Broker Details:*\r\n• Name: ${brokerName}\r\n• Email: ${brokerEmail}\r\n\r\n*Price Inquiries:*\r\n${itemsList}\r\n\r\n*Inquiry Summary:*\r\n• Total Original Value: KES ${totalOriginal.toLocaleString()}\r\n• Total Bargain Value: KES ${totalBargain.toLocaleString()}\r\n• Total Difference: ${totalDifferenceText}\r\n\r\n*Submitted:* ${new Date().toLocaleString('en-KE')}`;\r\n    }\r\n\r\n    // Expose module functions\r\n    window.InquiryModule = {\r\n        init,\r\n        addInquiry,\r\n        removeInquiry,\r\n        updateInquiry,\r\n        submitInquiries,\r\n        getItemCount\r\n    };\r\n\r\n    // Initialize when DOM is ready\r\n    if (document.readyState === 'loading') {\r\n        document.addEventListener('DOMContentLoaded', init);\r\n    } else {\r\n        init();\r\n    }\r\n})();"],"names":["products","inquiryItems","nextInquiryId","init","this","response","fetch","json","error","console","showToast","removeInquiry","inquiryId","filter","inquiry","id","window","BrokerDashboard","updateCartCount","updateInquiry","field","value","find","product","p","productId","originalPrice","price","difference","bargainPrice","numberFormatter","parseFormattedNumber","parseFloat","updateUI","tableBody","document","getElementById","emptyState","submitBtn","length","innerHTML","style","display","disabled","map","productOptions","concat","name","thickness","join","differenceClass","differenceText","absDiff","Math","abs","toLocaleString","minimumFractionDigits","maximumFractionDigits","formatPriceDifference","createInquiryRow","forEach","productSelect","bargainInput","deleteBtn","addEventListener","e","target","initInputFormatting","allowDecimals","decimalPlaces","currency","checkFormatter","setInterval","clearInterval","InquiryModule","addInquiry","push","submitInquiries","inquiryData","brokerName","brokerEmail","items","totalOriginal","reduce","sum","totalBargain","success","WhatsAppService","sendInquiryForm","message","itemsList","item","totalDifference","totalDifferenceText","Date","generateInquiryMessage","whatsappNumber","encodedMessage","encodeURIComponent","whatsappUrl","open","getItemCount","readyState"],"mappings":"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"}