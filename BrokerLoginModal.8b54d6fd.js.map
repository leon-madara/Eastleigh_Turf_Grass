{"version":3,"file":"BrokerLoginModal.8b54d6fd.js","sources":["../src/ui/BrokerLoginModal.js"],"sourcesContent":["/**\r\n * Broker Login Modal Component\r\n * Static HTML architecture for maximum performance and reliability\r\n * Handles authentication for broker users with green glass UI\r\n * Redirects to broker.html on successful login\r\n */\r\n(() => {\r\n    // Prevent duplicate initialization\r\n    if (window.brokerModalInitialized) {\r\n        return;\r\n    }\r\n    window.brokerModalInitialized = true;\r\n\r\n    // DOM element references\r\n    let modal = null;\r\n    let form = null;\r\n    let userInput = null;\r\n    let passInput = null;\r\n    let submitBtn = null;\r\n\r\n    // Configuration constants\r\n    const DEMO_USERNAME = 'BROKER';\r\n    const DEMO_PASSWORD = '123';\r\n    const DASHBOARD_URL = getBasePath() + '/broker.html';\r\n    const LOADING_DELAY = 700; // Simulated network delay\r\n\r\n    // Get the base path for GitHub Pages deployment\r\n    function getBasePath() {\r\n        // Check if we're on GitHub Pages (has base path)\r\n        const pathname = window.location.pathname;\r\n        if (pathname.includes('/Eastleigh_Turf_Grass/')) {\r\n            return '/Eastleigh_Turf_Grass';\r\n        }\r\n        // For local development or root deployment\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Creates and embeds the modal HTML in the DOM\r\n     */\r\n    function createModal() {\r\n        const modalHTML = `\r\n            <div id=\"brokerLogin\" class=\"bl-modal\" hidden>\r\n                <div class=\"bl-overlay\"></div>\r\n                <div class=\"bl-dialog\">\r\n                    <button class=\"bl-close\" aria-label=\"Close modal\">\r\n                        <i class=\"fas fa-times\"></i>\r\n                    </button>\r\n                    \r\n                    <div class=\"bl-head\">\r\n                        <div class=\"bl-mark\">\r\n                            <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                                <path d=\"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4\" />\r\n                                <polyline points=\"10,17 15,12 10,7\" />\r\n                                <line x1=\"15\" y1=\"12\" x2=\"3\" y2=\"12\" />\r\n                            </svg>\r\n                        </div>\r\n                        <h2 class=\"bl-title\">Broker Login</h2>\r\n                        <p class=\"bl-sub\">Enter your credentials to access the broker dashboard</p>\r\n                    </div>\r\n                    \r\n                    <form id=\"bl-form\" class=\"bl-form\">\r\n                        <div class=\"bl-row\">\r\n                            <label for=\"bl-user\">Username</label>\r\n                            <input type=\"text\" id=\"bl-user\" name=\"username\" placeholder=\"Enter your username\" required>\r\n                        </div>\r\n                        \r\n                        <div class=\"bl-row\">\r\n                            <label for=\"bl-pass\">Password</label>\r\n                            <input type=\"password\" id=\"bl-pass\" name=\"password\" placeholder=\"Enter your password\" required>\r\n                        </div>\r\n                        \r\n                        <button type=\"submit\" class=\"bl-btn bl-btn-primary bl-btn-block\">\r\n                            <span class=\"btn-text\">Login</span>\r\n                            <span class=\"btn-loading\" hidden>\r\n                                <i class=\"fas fa-spinner fa-spin\"></i>\r\n                                Logging in...\r\n                            </span>\r\n                        </button>\r\n                        \r\n                        <p class=\"bl-note\">Demo Credentials</p>\r\n                        <p class=\"bl-help\">Username: <code>BROKER</code> | Password: <code>123</code></p>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        // Insert modal at the end of body\r\n        document.body.insertAdjacentHTML('beforeend', modalHTML);\r\n\r\n        // Get DOM references\r\n        modal = document.getElementById('brokerLogin');\r\n        form = document.getElementById('bl-form');\r\n        userInput = document.getElementById('bl-user');\r\n        passInput = document.getElementById('bl-pass');\r\n        submitBtn = document.querySelector('.bl-btn');\r\n    }\r\n\r\n    /**\r\n     * Opens the broker login modal\r\n     * Sets focus to username field and prevents body scrolling\r\n     */\r\n    function open() {\r\n        if (!modal) {\r\n            console.warn('Modal not initialized');\r\n            return;\r\n        }\r\n\r\n        // Remove hidden attribute to show modal\r\n        modal.removeAttribute('hidden');\r\n        document.body.style.overflow = 'hidden';\r\n\r\n        // Small delay to ensure modal is fully rendered before focusing\r\n        setTimeout(() => {\r\n            if (userInput) userInput.focus();\r\n        }, 40);\r\n    }\r\n\r\n    /**\r\n     * Closes the broker login modal\r\n     * Resets form, clears errors, and restores body scrolling\r\n     */\r\n    function close() {\r\n        if (!modal) {\r\n            console.warn('Modal not initialized');\r\n            return;\r\n        }\r\n\r\n        // Add hidden attribute to hide modal\r\n        modal.setAttribute('hidden', '');\r\n        if (form) form.reset();\r\n        clearErrors();\r\n        setLoadingState(false);\r\n        document.body.style.overflow = '';\r\n    }\r\n\r\n    /**\r\n     * Removes all error styling and messages from the form\r\n     */\r\n    function clearErrors() {\r\n        if (!form) return;\r\n\r\n        // Remove error classes from inputs\r\n        const errorInputs = form.querySelectorAll('.bl-error');\r\n        errorInputs.forEach(element => {\r\n            element.classList.remove('bl-error');\r\n        });\r\n\r\n        // Remove error text elements\r\n        const errorElements = form.querySelectorAll('.bl-errtext');\r\n        errorElements.forEach(errorElement => {\r\n            errorElement.remove();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Displays an error message for a specific input field\r\n     * @param {HTMLInputElement} input - The input element that has the error\r\n     * @param {string} message - The error message to display\r\n     */\r\n    function showError(input, message) {\r\n        // Add error styling to the input\r\n        input.classList.add('bl-error');\r\n\r\n        // Create error message element\r\n        const errorDiv = document.createElement('div');\r\n        errorDiv.className = 'bl-errtext';\r\n        errorDiv.innerHTML = `<i class=\"fa-solid fa-circle-exclamation\"></i> ${message}`;\r\n\r\n        // Insert error message after the input\r\n        input.parentNode.insertBefore(errorDiv, input.nextSibling);\r\n    }\r\n\r\n    /**\r\n     * Sets the loading state of the submit button\r\n     * @param {boolean} isLoading - Whether the button should show loading state\r\n     */\r\n    function setLoadingState(isLoading) {\r\n        if (!submitBtn) return;\r\n\r\n        const btnText = submitBtn.querySelector('.btn-text');\r\n        const btnLoading = submitBtn.querySelector('.btn-loading');\r\n\r\n        if (isLoading) {\r\n            submitBtn.classList.add('loading');\r\n            submitBtn.disabled = true;\r\n            if (btnText) btnText.style.display = 'none';\r\n            if (btnLoading) btnLoading.hidden = false;\r\n        } else {\r\n            submitBtn.classList.remove('loading');\r\n            submitBtn.disabled = false;\r\n            if (btnText) btnText.style.display = 'inline';\r\n            if (btnLoading) btnLoading.hidden = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Redirects to the broker dashboard\r\n     */\r\n    function redirectToDashboard() {\r\n        console.log('Redirecting to broker dashboard...');\r\n\r\n        // Set authentication state\r\n        const authState = {\r\n            loggedIn: true,\r\n            user: {\r\n                username: DEMO_USERNAME,\r\n                email: 'broker@eastleighturf.com',\r\n                phone: '+254700000000',\r\n                role: 'broker'\r\n            },\r\n            loginTime: new Date().toISOString()\r\n        };\r\n\r\n        localStorage.setItem('authState', JSON.stringify(authState));\r\n\r\n        // Redirect to dashboard\r\n        window.location.href = DASHBOARD_URL;\r\n    }\r\n\r\n    /**\r\n     * Handles form submission and authentication\r\n     * @param {Event} event - The form submission event\r\n     */\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        if (!form || !userInput || !passInput) {\r\n            console.error('Form elements not found');\r\n            return;\r\n        }\r\n\r\n        // Clear previous errors\r\n        clearErrors();\r\n\r\n        // Get form data\r\n        const username = userInput.value.trim();\r\n        const password = passInput.value.trim();\r\n\r\n        // Validate inputs\r\n        if (!username) {\r\n            showError(userInput, 'Username is required');\r\n            userInput.focus();\r\n            return;\r\n        }\r\n\r\n        if (!password) {\r\n            showError(passInput, 'Password is required');\r\n            passInput.focus();\r\n            return;\r\n        }\r\n\r\n        // Set loading state\r\n        setLoadingState(true);\r\n\r\n        // Simulate authentication API call\r\n        // TODO: Replace with actual authentication API\r\n        setTimeout(() => {\r\n            if (username === DEMO_USERNAME && password === DEMO_PASSWORD) {\r\n                // Successful authentication\r\n                redirectToDashboard();\r\n            } else {\r\n                // Authentication failed\r\n                setLoadingState(false);\r\n                if (userInput) {\r\n                    showError(userInput, 'Invalid credentials. Use demo username: BROKER');\r\n                }\r\n                if (passInput) {\r\n                    showError(passInput, 'Invalid credentials. Use demo password: 123');\r\n                }\r\n                if (userInput) userInput.focus();\r\n            }\r\n        }, LOADING_DELAY);\r\n    }\r\n\r\n    /**\r\n     * Handles keyboard events for modal interaction\r\n     * @param {KeyboardEvent} event - The keyboard event\r\n     */\r\n    function handleKeydown(event) {\r\n        // Close modal on Escape key\r\n        if (event.key === 'Escape' && modal && !modal.hidden) {\r\n            close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes event listeners and DOM references\r\n     */\r\n    function setupEventListeners() {\r\n        if (!modal || !form || !userInput || !passInput || !submitBtn) {\r\n            console.error('Required modal elements not found');\r\n            return;\r\n        }\r\n\r\n        // Setup open button event listener\r\n        const openButton = document.getElementById('dealerLoginBtn');\r\n        if (openButton) {\r\n            openButton.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n                open();\r\n            });\r\n        }\r\n\r\n        // Setup close button event listeners\r\n        const closeButtons = modal.querySelectorAll('.bl-close, .bl-overlay');\r\n        closeButtons.forEach(element => {\r\n            element.addEventListener('click', close);\r\n        });\r\n\r\n        // Setup form submission\r\n        form.addEventListener('submit', handleSubmit);\r\n\r\n        // Setup keyboard event listener\r\n        document.addEventListener('keydown', handleKeydown);\r\n    }\r\n\r\n    /**\r\n     * Initializes the broker login modal\r\n     */\r\n    function initialize() {\r\n        try {\r\n            // Create and embed modal HTML\r\n            createModal();\r\n\r\n            // Setup event listeners\r\n            setupEventListeners();\r\n\r\n            console.log('Broker login modal initialized successfully');\r\n        } catch (error) {\r\n            console.error('Failed to initialize broker login modal:', error);\r\n        }\r\n    }\r\n\r\n    // Initialize the component when DOM is ready\r\n    if (document.readyState === 'loading') {\r\n        document.addEventListener('DOMContentLoaded', initialize);\r\n    } else {\r\n        initialize();\r\n    }\r\n\r\n    // Expose public API for external control\r\n    window.BrokerLogin = {\r\n        open,\r\n        close\r\n    };\r\n})();"],"names":["window","brokerModalInitialized","modal","form","userInput","passInput","submitBtn","DEMO_USERNAME","DASHBOARD_URL","location","pathname","includes","getBasePath","open","removeAttribute","document","body","style","overflow","setTimeout","focus","console","warn","close","setAttribute","reset","setLoadingState","clearErrors","querySelectorAll","forEach","element","classList","remove","errorElement","showError","input","message","add","errorDiv","createElement","className","innerHTML","concat","parentNode","insertBefore","nextSibling","isLoading","btnText","querySelector","btnLoading","disabled","display","hidden","handleSubmit","event","preventDefault","error","username","value","trim","password","log","authState","loggedIn","user","email","phone","role","loginTime","Date","toISOString","localStorage","setItem","JSON","stringify","href","handleKeydown","key","initialize","insertAdjacentHTML","getElementById","openButton","addEventListener","e","readyState","BrokerLogin"],"mappings":"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"}