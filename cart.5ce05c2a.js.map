{"version":3,"mappings":"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","names":["cartItems","cartTotal","init","savedCart","localStorage","getItem","JSON","parse","error","console","clearCartBtn","document","getElementById","addEventListener","clearCart","submitOrderBtn","window","checkoutModal","open","basePath","getBasePath","location","href","applyDiscountBtn","enterCouponBtn","discountModal","couponModal","warn","pathname","includes","hash","import","then","module","CartState","subscribe","state","saveCartToStorage","setItem","stringify","removeItem","index","removedItem","splice","remove","id","showToast","concat","name","calculateTotal","reduce","total","item","updateCartSummary","cartTotalElement","subtotal","discountAmount","getDiscountAmount","finalTotal","innerHTML","toLocaleString","textContent","hasDiscount","classList","toggle","hasCoupon","appliedCoupon","updateCartDisplay","cartCount","cartCountBadge","totalItems","quantity","cartItemsContainer","cartSummary","length","style","display","map","image","width","join","clear","title","description","type","ToastService","show","toast","toastMessage","querySelector","toastIcon","className","add","setTimeout","closeBtn","CartComponent","existingItemIndex","findIndex","cartItem","push","updateQuantity","newQuantity","area","price","getItems","getTotal","getCount","readyState"],"sources":["../src/js/components/cart.js"],"sourcesContent":["// Cart Component\r\n(() => {\r\n    let cartItems = [];\r\n    let cartTotal = 0;\r\n\r\n    // Initialize cart\r\n    function init() {\r\n        try {\r\n            loadCartFromStorage();\r\n            updateCartDisplay();\r\n            bindEvents();\r\n            initDiscountCouponButtons();\r\n\r\n            // Subscribe to Cart state changes\r\n            if (window.CartState) {\r\n                window.CartState.subscribe((state) => {\r\n                    updateCartSummary();\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.warn('Cart initialization failed:', error);\r\n        }\r\n    }\r\n\r\n    // Load cart from localStorage\r\n    function loadCartFromStorage() {\r\n        const savedCart = localStorage.getItem('eastleighCart');\r\n        if (savedCart) {\r\n            try {\r\n                cartItems = JSON.parse(savedCart);\r\n                calculateTotal();\r\n            } catch (error) {\r\n                console.error('Error loading cart from storage:', error);\r\n                cartItems = [];\r\n            }\r\n        }\r\n    }\r\n\r\n    // Save cart to localStorage\r\n    function saveCartToStorage() {\r\n        localStorage.setItem('eastleighCart', JSON.stringify(cartItems));\r\n    }\r\n\r\n    // Add item to cart\r\n    function addItem(item) {\r\n        const existingItemIndex = cartItems.findIndex(cartItem =>\r\n            cartItem.id === item.id &&\r\n            cartItem.length === item.length &&\r\n            cartItem.width === item.width\r\n        );\r\n\r\n        if (existingItemIndex !== -1) {\r\n            cartItems[existingItemIndex].quantity += item.quantity;\r\n        } else {\r\n            cartItems.push(item);\r\n        }\r\n\r\n        calculateTotal();\r\n        saveCartToStorage();\r\n        updateCartDisplay();\r\n\r\n        // Also add to Cart state for discount calculations\r\n        if (window.CartState) {\r\n            window.CartState.add(item);\r\n        }\r\n\r\n        showToast('Item Added', `${item.name} has been added to your cart`, 'success');\r\n    }\r\n\r\n    // Remove item from cart\r\n    function removeItem(index) {\r\n        const removedItem = cartItems[index];\r\n        cartItems.splice(index, 1);\r\n        calculateTotal();\r\n        saveCartToStorage();\r\n        updateCartDisplay();\r\n\r\n        // Also update Cart state\r\n        if (window.CartState) {\r\n            window.CartState.remove(removedItem.id);\r\n        }\r\n\r\n        showToast('Item Removed', `${removedItem.name} has been removed from your cart`, 'error');\r\n    }\r\n\r\n    // Update item quantity\r\n    function updateItemQuantity(index, newQuantity) {\r\n        if (newQuantity <= 0) {\r\n            removeItem(index);\r\n            return;\r\n        }\r\n\r\n        cartItems[index].quantity = newQuantity;\r\n        cartItems[index].total = cartItems[index].area * cartItems[index].price * newQuantity;\r\n        calculateTotal();\r\n        saveCartToStorage();\r\n        updateCartDisplay();\r\n    }\r\n\r\n    // Calculate total\r\n    function calculateTotal() {\r\n        cartTotal = cartItems.reduce((total, item) => total + item.total, 0);\r\n    }\r\n\r\n    // Update cart summary with discount information\r\n    function updateCartSummary() {\r\n        try {\r\n            const cartTotalElement = document.getElementById('cartTotal');\r\n            const applyDiscountBtn = document.getElementById('applyDiscountBtn');\r\n            const enterCouponBtn = document.getElementById('enterCouponBtn');\r\n\r\n            if (!cartTotalElement) return;\r\n\r\n            // Get discount information from Cart state\r\n            const subtotal = cartItems.reduce((total, item) => total + item.total, 0);\r\n            const discountAmount = window.CartState ? window.CartState.getDiscountAmount() : 0;\r\n            const finalTotal = subtotal - discountAmount;\r\n\r\n            // Update total display\r\n            if (discountAmount > 0) {\r\n                cartTotalElement.innerHTML = `\r\n                    <div class=\"cart-total-breakdown\">\r\n                        <div class=\"subtotal\">Subtotal: KES ${subtotal.toLocaleString()}</div>\r\n                        <div class=\"discount\">Discount: -KES ${discountAmount.toLocaleString()}</div>\r\n                        <div class=\"final-total\">Total: KES ${finalTotal.toLocaleString()}</div>\r\n                    </div>\r\n                `;\r\n            } else {\r\n                cartTotalElement.textContent = `KES ${subtotal.toLocaleString()}`;\r\n            }\r\n\r\n            // Update button states\r\n            if (applyDiscountBtn) {\r\n                const hasDiscount = window.CartState && window.CartState.getDiscountAmount() > 0;\r\n                applyDiscountBtn.innerHTML = hasDiscount ?\r\n                    '<i class=\"fas fa-check\"></i> Discount Applied' :\r\n                    '<i class=\"fas fa-tag\"></i> Apply Discount';\r\n                applyDiscountBtn.classList.toggle('applied', hasDiscount);\r\n            }\r\n\r\n            if (enterCouponBtn) {\r\n                const hasCoupon = window.CartState && window.CartState.appliedCoupon;\r\n                enterCouponBtn.innerHTML = hasCoupon ?\r\n                    '<i class=\"fas fa-check\"></i> Coupon Applied' :\r\n                    '<i class=\"fas fa-ticket-alt\"></i> Enter Coupon';\r\n                enterCouponBtn.classList.toggle('applied', hasCoupon);\r\n            }\r\n        } catch (error) {\r\n            console.warn('Cart summary update failed:', error);\r\n        }\r\n    }\r\n\r\n    // Update cart display\r\n    function updateCartDisplay() {\r\n        try {\r\n            updateCartCount();\r\n            updateCartPanel();\r\n            // updateCartModal(); // Removed - cart modal functionality was removed\r\n        } catch (error) {\r\n            console.warn('Cart display update failed:', error);\r\n        }\r\n    }\r\n\r\n    // Update cart count in header\r\n    function updateCartCount() {\r\n        try {\r\n            const cartCount = document.getElementById('cartCount');\r\n            const cartCountBadge = document.getElementById('cartCountBadge');\r\n            const totalItems = cartItems.reduce((total, item) => total + item.quantity, 0);\r\n\r\n            if (cartCount) cartCount.textContent = totalItems;\r\n            if (cartCountBadge) cartCountBadge.textContent = totalItems;\r\n        } catch (error) {\r\n            console.warn('Cart count update failed:', error);\r\n        }\r\n    }\r\n\r\n    // Update cart panel\r\n    function updateCartPanel() {\r\n        try {\r\n            const cartItemsContainer = document.getElementById('cartItems');\r\n            const cartSummary = document.getElementById('cartSummary');\r\n            const cartTotalElement = document.getElementById('cartTotal');\r\n\r\n            if (!cartItemsContainer) return;\r\n\r\n            if (cartItems.length === 0) {\r\n                cartItemsContainer.innerHTML = `\r\n                    <div class=\"empty-cart\">\r\n                        <i class=\"fas fa-shopping-basket\"></i>\r\n                        <p>Your cart is empty</p>\r\n                        <span>Add some products to get started</span>\r\n                    </div>\r\n                `;\r\n                if (cartSummary) cartSummary.style.display = 'none';\r\n            } else {\r\n                cartItemsContainer.innerHTML = cartItems.map((item, index) => `\r\n                    <div class=\"cart-item\">\r\n                        <div class=\"cart-item-image\">\r\n                            <img src=\"${item.image}\" alt=\"${item.name}\" />\r\n                        </div>\r\n                        <div class=\"cart-item-details\">\r\n                            <div class=\"cart-item-name\">${item.name}</div>\r\n                            <div class=\"cart-item-dimensions\">${item.length}m × ${item.width}m</div>\r\n                            <div class=\"cart-item-price\">KES ${item.total.toLocaleString()}</div>\r\n                        </div>\r\n                        <div class=\"cart-item-actions\">\r\n                            <div class=\"quantity-controls\">\r\n                                <button class=\"quantity-btn\" onclick=\"window.CartComponent.updateQuantity(${index}, ${item.quantity - 1})\">-</button>\r\n                                <span class=\"quantity-display\">${item.quantity}</span>\r\n                                <button class=\"quantity-btn\" onclick=\"window.CartComponent.updateQuantity(${index}, ${item.quantity + 1})\">+</button>\r\n                            </div>\r\n                            <button class=\"remove-item-btn\" onclick=\"window.CartComponent.remove(${index})\">\r\n                                <i class=\"fas fa-trash\"></i>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                `).join('');\r\n\r\n                if (cartSummary) {\r\n                    cartSummary.style.display = 'block';\r\n                    updateCartSummary();\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.warn('Cart panel update failed:', error);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // Clear cart\r\n    function clearCart() {\r\n        cartItems = [];\r\n        cartTotal = 0;\r\n        saveCartToStorage();\r\n        updateCartDisplay();\r\n\r\n        // Also clear Cart state\r\n        if (window.CartState) {\r\n            window.CartState.clear();\r\n        }\r\n\r\n        showToast('Cart Cleared', 'All items have been removed from your cart', 'error');\r\n    }\r\n\r\n    // Checkout via WhatsApp\r\n    function checkoutViaWhatsApp() {\r\n        if (cartItems.length === 0) {\r\n            showToast('Empty Cart', 'Please add items to your cart before checkout', 'error');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Prepare cart data for WhatsApp\r\n            const cartData = {\r\n                customerName: 'Customer', // You can make this dynamic\r\n                customerEmail: 'customer@example.com', // You can make this dynamic\r\n                items: cartItems.map(item => ({\r\n                    product: {\r\n                        name: item.name\r\n                    },\r\n                    quantity: item.quantity,\r\n                    unitPrice: item.price,\r\n                    total: item.total\r\n                })),\r\n                total: cartTotal\r\n            };\r\n\r\n            // Send to WhatsApp\r\n            const success = window.WhatsAppService.sendOrderForm(cartData);\r\n\r\n            if (success) {\r\n                showToast('Checkout', 'WhatsApp will open with your order details. Please complete your purchase there.', 'success');\r\n                // Optionally clear cart after successful checkout\r\n                // clearCart();\r\n            } else {\r\n                showToast('Checkout Failed', 'Failed to open WhatsApp. Please try again.', 'error');\r\n            }\r\n        } catch (error) {\r\n            console.error('Checkout error:', error);\r\n            showToast('Checkout Error', 'An error occurred during checkout. Please try again.', 'error');\r\n        }\r\n    }\r\n\r\n    // Show toast notification using unified service\r\n    function showToast(title, description, type = 'success') {\r\n        // Use the unified toast service if available\r\n        if (window.ToastService) {\r\n            window.ToastService.show(description || title, type);\r\n        } else {\r\n            // Fallback to old method if service not available\r\n            const toast = document.getElementById('toast');\r\n            if (!toast) return;\r\n\r\n            const toastMessage = toast.querySelector('.toast-message');\r\n            const toastIcon = toast.querySelector('.toast-icon i');\r\n\r\n            if (toastMessage) toastMessage.textContent = description || title;\r\n\r\n            // Set icon based on type\r\n            if (toastIcon) {\r\n                switch (type) {\r\n                    case 'success':\r\n                        toastIcon.className = 'fas fa-check-circle';\r\n                        break;\r\n                    case 'error':\r\n                        toastIcon.className = 'fas fa-exclamation-circle';\r\n                        break;\r\n                    case 'warning':\r\n                        toastIcon.className = 'fas fa-exclamation-triangle';\r\n                        break;\r\n                    case 'info':\r\n                        toastIcon.className = 'fas fa-info-circle';\r\n                        break;\r\n                    default:\r\n                        toastIcon.className = 'fas fa-check-circle';\r\n                }\r\n            }\r\n\r\n            toast.className = `toast ${type}`;\r\n            toast.classList.remove('hidden');\r\n            toast.classList.add('show');\r\n\r\n            // Auto-hide after 3 seconds\r\n            setTimeout(() => {\r\n                toast.classList.remove('show');\r\n                setTimeout(() => {\r\n                    toast.classList.add('hidden');\r\n                }, 300);\r\n            }, 3000);\r\n\r\n            // Add close button functionality\r\n            const closeBtn = toast.querySelector('.toast-close');\r\n            if (closeBtn) {\r\n                closeBtn.addEventListener('click', () => {\r\n                    toast.classList.remove('show');\r\n                    setTimeout(() => {\r\n                        toast.classList.add('hidden');\r\n                    }, 300);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    // Initialize discount and coupon buttons\r\n    function initDiscountCouponButtons() {\r\n        // Only load modals on products page\r\n        if (window.location.pathname.includes('products.html') ||\r\n            (window.location.pathname === '/' && window.location.hash === '#cart')) {\r\n\r\n            // Import modals dynamically to avoid circular dependencies\r\n            import('../../ui/discountModal.js').then(module => {\r\n                window.discountModal = module.discountModal;\r\n            });\r\n\r\n            import('../../ui/components/couponModal.js').then(module => {\r\n                window.couponModal = module.couponModal;\r\n            });\r\n\r\n            // Initialize checkout modal\r\n            import('../../ui/checkoutModal.js').then(module => {\r\n                window.checkoutModal = module.checkoutModal;\r\n                window.checkoutModal.init();\r\n            });\r\n        }\r\n    }\r\n\r\n    // Bind events\r\n    function bindEvents() {\r\n        try {\r\n            // Clear cart buttons\r\n            const clearCartBtn = document.getElementById('clearCartBtn');\r\n\r\n            if (clearCartBtn) {\r\n                clearCartBtn.addEventListener('click', clearCart);\r\n            }\r\n\r\n            // Checkout buttons\r\n            const submitOrderBtn = document.getElementById('submitOrderBtn');\r\n\r\n            if (submitOrderBtn) {\r\n                submitOrderBtn.addEventListener('click', () => {\r\n                    if (window.checkoutModal) {\r\n                        window.checkoutModal.open();\r\n                                    } else {\r\n                    // Redirect to products page if checkout modal is not available\r\n                    const basePath = getBasePath();\r\n                    window.location.href = basePath + '/products.html#cart';\r\n                }\r\n                });\r\n            }\r\n\r\n            // Discount and coupon buttons\r\n            const applyDiscountBtn = document.getElementById('applyDiscountBtn');\r\n            const enterCouponBtn = document.getElementById('enterCouponBtn');\r\n\r\n            if (applyDiscountBtn) {\r\n                applyDiscountBtn.addEventListener('click', () => {\r\n                    if (window.discountModal) {\r\n                        window.discountModal.open();\r\n                                    } else {\r\n                    // Redirect to products page if discount modal is not available\r\n                    const basePath = getBasePath();\r\n                    window.location.href = basePath + '/products.html#cart';\r\n                }\r\n                });\r\n            }\r\n\r\n            if (enterCouponBtn) {\r\n                enterCouponBtn.addEventListener('click', () => {\r\n                    if (window.couponModal) {\r\n                        window.couponModal.open();\r\n                                    } else {\r\n                    // Redirect to products page if coupon modal is not available\r\n                    const basePath = getBasePath();\r\n                    window.location.href = basePath + '/products.html#cart';\r\n                }\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.warn('Cart events binding failed:', error);\r\n        }\r\n    }\r\n\r\n    // Public API - Keep the old cart system for backward compatibility\r\n    window.CartComponent = {\r\n        init,\r\n        add: addItem,\r\n        remove: removeItem,\r\n        updateQuantity: updateItemQuantity,\r\n        clear: clearCart,\r\n        getItems: () => cartItems,\r\n        getTotal: () => cartTotal,\r\n        getCount: () => cartItems.reduce((total, item) => total + item.quantity, 0)\r\n    };\r\n\r\n\r\n\r\n    // Get the base path for GitHub Pages deployment\r\n    function getBasePath() {\r\n        // Check if we're on GitHub Pages (has base path)\r\n        const pathname = window.location.pathname;\r\n        if (pathname.includes('/Eastleigh_Turf_Grass/')) {\r\n            return '/Eastleigh_Turf_Grass';\r\n        }\r\n        // For local development or root deployment\r\n        return '';\r\n    }\r\n\r\n    // Initialize when DOM is ready\r\n    if (document.readyState === 'loading') {\r\n        document.addEventListener('DOMContentLoaded', init);\r\n    } else {\r\n        init();\r\n    }\r\n})();"],"file":"cart.5ce05c2a.js"}