{"version":3,"file":"discountService.94c97e12.js","sources":["../src/services/couponService.js","../src/services/discountService.js"],"sourcesContent":["// Coupon Service - Handles coupon validation and management\r\nclass CouponService {\r\n    constructor() {\r\n        this.coupons = [];\r\n        this.loadCoupons();\r\n    }\r\n\r\n    // Load coupons from data file\r\n    async loadCoupons() {\r\n        try {\r\n            const response = await fetch('/src/data/coupons.json');\r\n            const data = await response.json();\r\n            this.coupons = data.coupons || [];\r\n        } catch (error) {\r\n            console.error('Error loading coupons:', error);\r\n            this.coupons = [];\r\n        }\r\n    }\r\n\r\n    // Validate a coupon code\r\n    validateCoupon(code, subtotal = 0) {\r\n        const coupon = this.coupons.find(c => c.code.toUpperCase() === code.toUpperCase());\r\n\r\n        if (!coupon) {\r\n            return {\r\n                valid: false,\r\n                message: 'Invalid coupon code'\r\n            };\r\n        }\r\n\r\n        // Check if coupon is expired\r\n        const now = new Date();\r\n        const validFrom = new Date(coupon.validFrom);\r\n        const validTo = new Date(coupon.validTo);\r\n\r\n        if (now < validFrom || now > validTo) {\r\n            return {\r\n                valid: false,\r\n                message: 'Coupon has expired or is not yet valid'\r\n            };\r\n        }\r\n\r\n        // Check minimum order requirement\r\n        if (subtotal < coupon.minOrder) {\r\n            return {\r\n                valid: false,\r\n                message: `Minimum order of KES ${coupon.minOrder.toLocaleString()} required`\r\n            };\r\n        }\r\n\r\n        // Check usage limit\r\n        if (coupon.usedCount >= coupon.usageLimit) {\r\n            return {\r\n                valid: false,\r\n                message: 'Coupon usage limit reached'\r\n            };\r\n        }\r\n\r\n        return {\r\n            valid: true,\r\n            coupon: coupon,\r\n            message: 'Coupon applied successfully'\r\n        };\r\n    }\r\n\r\n    // Calculate discount amount for a coupon\r\n    calculateCouponDiscount(coupon, subtotal) {\r\n        let discountAmount = 0;\r\n\r\n        if (coupon.type === 'percentage') {\r\n            discountAmount = subtotal * (coupon.value / 100);\r\n        } else if (coupon.type === 'fixed') {\r\n            discountAmount = coupon.value;\r\n        }\r\n\r\n        // Apply maximum discount cap\r\n        if (discountAmount > coupon.maxDiscount) {\r\n            discountAmount = coupon.maxDiscount;\r\n        }\r\n\r\n        return Math.min(discountAmount, subtotal); // Can't discount more than subtotal\r\n    }\r\n\r\n    // Apply coupon and return discount details\r\n    applyCoupon(code, subtotal) {\r\n        const validation = this.validateCoupon(code, subtotal);\r\n\r\n        if (!validation.valid) {\r\n            return validation;\r\n        }\r\n\r\n        const coupon = validation.coupon;\r\n        const discountAmount = this.calculateCouponDiscount(coupon, subtotal);\r\n        const finalTotal = subtotal - discountAmount;\r\n\r\n        return {\r\n            valid: true,\r\n            coupon: coupon,\r\n            discountAmount: discountAmount,\r\n            finalTotal: finalTotal,\r\n            message: `Coupon \"${coupon.code}\" applied! You saved KES ${discountAmount.toLocaleString()}`\r\n        };\r\n    }\r\n\r\n    // Get available coupons for display\r\n    getAvailableCoupons(subtotal = 0) {\r\n        return this.coupons.filter(coupon => {\r\n            const validation = this.validateCoupon(coupon.code, subtotal);\r\n            return validation.valid;\r\n        });\r\n    }\r\n\r\n    // Increment coupon usage (for tracking)\r\n    incrementCouponUsage(code) {\r\n        const coupon = this.coupons.find(c => c.code.toUpperCase() === code.toUpperCase());\r\n        if (coupon) {\r\n            coupon.usedCount++;\r\n            // In a real app, this would be saved to a database\r\n        }\r\n    }\r\n}\r\n\r\n// Export singleton instance\r\nexport const couponService = new CouponService();","// Discount Service - Handles promotional discounts and rules\r\nclass DiscountService {\r\n    constructor() {\r\n        this.promotions = [];\r\n        this.loadPromotions();\r\n    }\r\n\r\n    // Load promotions from data file\r\n    async loadPromotions() {\r\n        try {\r\n            const response = await fetch('/src/data/discounts.json');\r\n            const data = await response.json();\r\n            this.promotions = data.promotions || [];\r\n        } catch (error) {\r\n            console.error('Error loading promotions:', error);\r\n            this.promotions = [];\r\n        }\r\n    }\r\n\r\n    // Get available promotions for a given subtotal\r\n    getAvailablePromotions(subtotal = 0) {\r\n        const now = new Date();\r\n\r\n        return this.promotions.filter(promotion => {\r\n            // Check if promotion is active\r\n            if (!promotion.active) return false;\r\n\r\n            // Check date validity\r\n            const validFrom = new Date(promotion.validFrom);\r\n            const validTo = new Date(promotion.validTo);\r\n\r\n            if (now < validFrom || now > validTo) return false;\r\n\r\n            // Check minimum order requirement\r\n            if (subtotal < promotion.minOrder) return false;\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    // Get the best available promotion\r\n    getBestPromotion(subtotal = 0) {\r\n        const availablePromotions = this.getAvailablePromotions(subtotal);\r\n\r\n        if (availablePromotions.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        // Calculate potential savings for each promotion\r\n        const promotionsWithSavings = availablePromotions.map(promotion => {\r\n            const savings = this.calculatePromotionDiscount(promotion, subtotal);\r\n            return {\r\n                ...promotion,\r\n                potentialSavings: savings\r\n            };\r\n        });\r\n\r\n        // Return the promotion with the highest savings\r\n        return promotionsWithSavings.reduce((best, current) => {\r\n            return current.potentialSavings > best.potentialSavings ? current : best;\r\n        });\r\n    }\r\n\r\n    // Calculate discount amount for a promotion\r\n    calculatePromotionDiscount(promotion, subtotal) {\r\n        let discountAmount = 0;\r\n\r\n        if (promotion.type === 'percentage') {\r\n            discountAmount = subtotal * (promotion.value / 100);\r\n        } else if (promotion.type === 'fixed') {\r\n            discountAmount = promotion.value;\r\n        }\r\n\r\n        // Apply maximum discount cap\r\n        if (discountAmount > promotion.maxDiscount) {\r\n            discountAmount = promotion.maxDiscount;\r\n        }\r\n\r\n        return Math.min(discountAmount, subtotal); // Can't discount more than subtotal\r\n    }\r\n\r\n    // Apply a specific promotion\r\n    applyPromotion(promotionId, subtotal) {\r\n        const promotion = this.promotions.find(p => p.id === promotionId);\r\n\r\n        if (!promotion) {\r\n            return {\r\n                valid: false,\r\n                message: 'Promotion not found'\r\n            };\r\n        }\r\n\r\n        const availablePromotions = this.getAvailablePromotions(subtotal);\r\n        const isAvailable = availablePromotions.some(p => p.id === promotionId);\r\n\r\n        if (!isAvailable) {\r\n            return {\r\n                valid: false,\r\n                message: 'Promotion not available for this order'\r\n            };\r\n        }\r\n\r\n        const discountAmount = this.calculatePromotionDiscount(promotion, subtotal);\r\n        const finalTotal = subtotal - discountAmount;\r\n\r\n        return {\r\n            valid: true,\r\n            promotion: promotion,\r\n            discountAmount: discountAmount,\r\n            finalTotal: finalTotal,\r\n            message: `${promotion.name} applied! You saved KES ${discountAmount.toLocaleString()}`\r\n        };\r\n    }\r\n\r\n    // Get promotion details for display\r\n    getPromotionDetails(promotionId) {\r\n        return this.promotions.find(p => p.id === promotionId);\r\n    }\r\n\r\n    // Check if any promotions are available\r\n    hasAvailablePromotions(subtotal = 0) {\r\n        return this.getAvailablePromotions(subtotal).length > 0;\r\n    }\r\n\r\n    // Get promotion summary for UI display\r\n    getPromotionSummary(subtotal = 0) {\r\n        const bestPromotion = this.getBestPromotion(subtotal);\r\n\r\n        if (!bestPromotion) {\r\n            return null;\r\n        }\r\n\r\n        const savings = this.calculatePromotionDiscount(bestPromotion, subtotal);\r\n\r\n        return {\r\n            promotion: bestPromotion,\r\n            savings: savings,\r\n            finalTotal: subtotal - savings,\r\n            savingsPercentage: ((savings / subtotal) * 100).toFixed(1)\r\n        };\r\n    }\r\n}\r\n\r\n// Export singleton instance\r\nexport const discountService = new DiscountService();"],"names":["couponService","constructor","this","coupons","loadCoupons","__async","response","fetch","data","json","error","console","validateCoupon","code","subtotal","coupon","find","c","toUpperCase","valid","message","now","Date","validFrom","validTo","minOrder","concat","toLocaleString","usedCount","usageLimit","calculateCouponDiscount","discountAmount","type","value","maxDiscount","Math","min","applyCoupon","validation","finalTotal","getAvailableCoupons","filter","incrementCouponUsage","discountService","promotions","loadPromotions","getAvailablePromotions","promotion","active","getBestPromotion","availablePromotions","length","map","savings","calculatePromotionDiscount","potentialSavings","reduce","best","current","applyPromotion","promotionId","p","id","some","name","getPromotionDetails","hasAvailablePromotions","getPromotionSummary","bestPromotion","savingsPercentage","toFixed"],"mappings":"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"}